---
import { Schema } from 'astro-seo-schema'
import type { MarkdownLayoutProps } from 'astro'

import '@/styles/global.css'

import { SITE } from '@/config'
import SchemaOrganizationFutureStateDesignCo from '@/components/Schema/Organization/FutureStateDesignCo.astro'
import BaseHead from '@/components/BaseHead.astro'
import Footer from '@/components/Footer.astro'
import Header from '@/components/Header.astro'
import Subscribe from '@/components/Subscribe.astro'
import Menu from '@/components/Menu.astro'
import Contact from '@/components/Contact.astro'
import Prose from '@/components/Prose.astro'
import ModalMenu from '@/components/Modal/Menu/index.svelte'
import ModalMenuMenu from '@/components/Modal/Menu/Menu.astro'

type Props = MarkdownLayoutProps<{
  id: string
  name: string
  headline: string
  description: string
  url: string
  image: {
    url: string
    width: number
    height: number
    alt: string
  }
  theme?: string
  tag?: string
}>

const { frontmatter, file } = Astro.props as Props
const {
  id,
  name,
  headline,
  description,
  url,
  image,
  theme,
  tag: Tag = 'article',
} = frontmatter

const meta = {
  title: `${name} - ${SITE.name}`,
  description,
  url,
  image,
}
---

<html lang={SITE.lang}>
  <BaseHead {...meta}>
    <>
      <Schema
        item={{
          '@context': 'https://schema.org',
          '@type': 'WebPage',
          name,
          headline,
          description,
          url: `${SITE.url}${url}`,
          // image: {
          //   '@type': 'ImageObject',
          //   contentUrl: `${SITE.url}${image.url}`,
          //   description: image.alt,
          // },
          mainEntity: {
            '@type': 'Article',
            '@id': `${SITE.url}${url}#${id}`,
          },
          copyrightHolder: {
            '@type': 'Organization',
            '@id': SITE.id,
          },
          copyrightYear: SITE.copyrightYear,
        }}
      />
      <SchemaOrganizationFutureStateDesignCo />
    </>
  </BaseHead>
  <body class:list={[theme == 'white' && 'bg-qux text-white']}>
    <div class="flex flex-col w-full min-h-screen">
      <Header />
      <main class="flex-auto">
        <Tag class="flex-auto pb-10" id={id}>
          <div class="container">
            <div class="grid md:gap-10 md:grid-cols-8 relative">
              <div class="md:col-span-2"></div>
              <div class="md:col-span-6">
                <h1 class="h1 mb-10">{name}</h1>
                <Prose class={theme == 'white' ? 'prose-white' : 'prose-black'}>
                  <slot />
                </Prose>
              </div>
            </div>
          </div>
        </Tag>
      </main>
      <Contact />
      <Subscribe />
      <Menu />
      <Footer />
    </div>
    <ModalMenu client:load>
      <ModalMenuMenu />
    </ModalMenu>
  </body>
</html>
