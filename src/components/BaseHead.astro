---
import { SEO } from 'astro-seo'
import { SITE } from '@config'

export interface Props {
  title: string
  description?: string
  url?: string
  image?: {
    url?: string
    width?: number
    height?: number
    alt?: string
  }
}

const {
  title = SITE.name,
  description = SITE.description,
  url = '/',
  image = {
    url: '/images/image.png',
    width: 1200,
    height: 630,
    alt: 'Futurestate Design Co logo',
  },
} = Astro.props as Props
---

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width" />
  <SEO
    canonical={`${SITE.url}/`}
    title={title}
    description={description}
    openGraph={{
      basic: {
        title: description,
        type: 'webpage',
        image: `${SITE.url}${image.url}`,
        url: `${SITE.url}${url}`,
      },

      optional: {
        siteName: SITE.name,
        locale: SITE.locale,
        description,
      },

      image: {
        width: image.width,
        height: image.height,
        alt: image.alt,
      },
    }}
    twitter={{
      card: 'summary_large_image',
      site: '@wilsonfletcher',
      creator: '@wilsonfletcher',
    }}
    extend={{
      link: [
        { rel: 'icon', type: 'image/svg+xml', href: '/favicon.svg' },
        { rel: 'author', type: 'text/plain', href: '/humans.txt' },
        // { rel: 'mainfest', href: '/site.webmanifest' },
        {
          rel: 'manifest',
          href: '/manifest.webmanifest',
          crossOrigin: 'use-credentials',
        },
        {
          rel: 'mask-icon',
          href: '/safari-pinned-tab.svg',
        },
        {
          rel: 'apple-touch-icon',
          href: '/apple-touch-icon.png',
        },
      ],
      meta: [{ name: 'theme-color', content: SITE.themeColor }],
    }}
  />
  <script is:inline>
    ;(function () {
      var config = {
        kitId: 'gyw4mlp',
        scriptTimeout: 3000,
      }
      var h = document.getElementsByTagName('html')[0]
      h.className += ' wf-loading'
      var t = setTimeout(function () {
        h.className = h.className.replace(/(\s|^)wf-loading(\s|$)/g, ' ')
        h.className += ' wf-inactive'
      }, config.scriptTimeout)
      var d = false
      var tk = document.createElement('script')
      tk.src = '//use.typekit.net/' + config.kitId + '.js'
      tk.type = 'text/javascript'
      tk.async = 'true'
      tk.onload = tk.onreadystatechange = function () {
        var rs = this.readyState
        if (d || (rs && rs != 'complete' && rs != 'loaded')) return
        d = true
        clearTimeout(t)
        try {
          Typekit.load(config)
        } catch (e) {}
      }
      var s = document.getElementsByTagName('script')[0]
      s.parentNode.insertBefore(tk, s)
    })()
  </script>
  <slot />
</head>
